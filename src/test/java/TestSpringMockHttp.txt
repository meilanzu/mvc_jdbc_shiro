import static org.junit.Assert.assertEquals;

import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.beans.factory.annotation.*;
import org.springframework.jdbc.datasource.embedded.*;
import static junit.framework.Assert.*;
import org.junit.runner.RunWith;
import junit.framework.*;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.servlet.ModelAndView;

import formo.web.TypeController;
import formo.domain.Type;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration( locations = { "classpath*:/applicationContextTest.xml" })
public class TestSpringMockHttp {
	
    private TypeController servlet;
    private MockHttpServletRequest request;
    private MockHttpServletResponse response;

    @Before
    public void setUp() {
        servlet = new TypeController();
        request = new MockHttpServletRequest();
        response = new MockHttpServletResponse();
    }

    @Test
    public void saveType() throws ServletException, IOException {
	
		Type type = getType("Pollo Taco", 2.00, 100);
		
		request.setContent(serialize(type));
		ModelAndView modelAndView = servlet.handleRequest(request, response);

        assertEquals("text/html", response.getContentType());

    }

	private byte[] serialize(Type type){
		ByteArrayOutputStream b = new ByteArrayOutputStream();
		ObjectOutputStream o = new ObjectOutputStream(b);
		o.writeObject(type);
		return b.toByteArray();		
	}

	private Type getType(String name, double price, int quantity){
		Type type = new Type();
		type.setName(name);
		type.setPrice(price);
		type.setQuantity(quantity);
		return type;
	}


}